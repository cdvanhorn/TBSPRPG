dotnet new gitignore
git config user.name "cdvanhorn"
git config user.email "cdavid.vanhorn@gmail.com"

#create main service project
dotnet new webapi -o MapApi

#create a project for tests
dotnet new xuint -o MapApi.Tests
dotnet add package Moq
dotnet add reference ../MapApi/MapApi.csproj

#tie them together with a solution
dotnet new sln --name mapapi
dotnet sln add MapApi/MapApi.csproj
dotnet sln add MapApi.Tests/MapApi.Tests.csproj

#create usual directories
cd MapApi
mkdir Repositories
mkdir Services
mkdir EventProcessors
mkdir Entities
mkdir Adapters

#add the nuget.conf file and add the TbspRpgLib
cp ~/Projects/TBSPRPG/TBSPRPG/boilerplate/nuget.config ./MapApi
echo MapApi/nuget.config >> .gitignore
cd MapApi
dotnet add package TbspRpgLib
cd ..

#setup dependency injection and settings template
cp ~/Projects/TBSPRPG/TBSPRPG/boilerplate/appsettings.json ./MapApi
cp ~/Projects/TBSPRPG/TBSPRPG/boilerplate/Startup.cs ./MapApi
#update the namespace of the startup file copied

#we are now at the point where we can start to develop controllers, repositories, and services

#copy a service docker file in to the project
cp ~/Projects/TBSPRPG/TBSPRPG/boilerplate/Dockerfile ./MapApi
#add the service to docker-compose for testing

#start adding event listeners
cp ~/Projects/TBSPRPG/TBSPRPG/boilerplate/NewGameEventProcessor.cs ./MapApi/EventProcessors/
#wrote game aggregrate adapter to convert from a game aggregrate object to the service's game object
#add the aggregate adapter to startup for dependency injection
#add the worker to startup so a worker starts
